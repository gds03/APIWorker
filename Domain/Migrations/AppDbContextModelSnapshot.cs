// <auto-generated />
using System;
using Domain.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Database.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedWhenUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = "9999-ZYXWVUTS-99",
                            CreatedWhenUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.com",
                            IsActive = true,
                            IsVerified = true
                        });
                });

            modelBuilder.Entity("Domain.Database.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedWhenUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Database.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedWhenUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payments");

                    b.HasDiscriminator<string>("PaymentType").HasValue("Payment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Database.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedWhenUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDiscontinued")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("StockQuantity")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedWhenUtc = new DateTime(2025, 4, 2, 12, 2, 50, 614, DateTimeKind.Utc).AddTicks(8112),
                            Description = "Powerful laptop with Intel Core i7, 16GB RAM, and 512GB SSD.",
                            IsDiscontinued = false,
                            Name = "Dell XPS 15",
                            Price = 1599.99m,
                            Sku = "LAPTOP-001",
                            StockQuantity = 10L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedWhenUtc = new DateTime(2025, 4, 2, 12, 2, 50, 614, DateTimeKind.Utc).AddTicks(8117),
                            Description = "Apple M2 Pro chip, 16GB RAM, 512GB SSD, Retina Display.",
                            IsDiscontinued = false,
                            Name = "MacBook Pro 14\"",
                            Price = 1999.99m,
                            Sku = "LAPTOP-002",
                            StockQuantity = 8L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedWhenUtc = new DateTime(2025, 4, 2, 12, 2, 50, 614, DateTimeKind.Utc).AddTicks(8119),
                            Description = "Business laptop with Intel Core i7, 16GB RAM, and 1TB SSD.",
                            IsDiscontinued = false,
                            Name = "Lenovo ThinkPad X1 Carbon",
                            Price = 1899.99m,
                            Sku = "LAPTOP-003",
                            StockQuantity = 6L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedWhenUtc = new DateTime(2025, 4, 2, 12, 2, 50, 614, DateTimeKind.Utc).AddTicks(8120),
                            Description = "Gaming laptop with AMD Ryzen 9, RTX 4060, and 16GB RAM.",
                            IsDiscontinued = false,
                            Name = "ASUS ROG Zephyrus G14",
                            Price = 1799.99m,
                            Sku = "LAPTOP-004",
                            StockQuantity = 5L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedWhenUtc = new DateTime(2025, 4, 2, 12, 2, 50, 614, DateTimeKind.Utc).AddTicks(8122),
                            Description = "2-in-1 convertible laptop with OLED display and Intel Core i7.",
                            IsDiscontinued = false,
                            Name = "HP Spectre x360 14",
                            Price = 1699.99m,
                            Sku = "LAPTOP-005",
                            StockQuantity = 7L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedWhenUtc = new DateTime(2025, 4, 2, 12, 2, 50, 614, DateTimeKind.Utc).AddTicks(8124),
                            Description = "Budget-friendly laptop with AMD Ryzen 7, 16GB RAM, and 512GB SSD.",
                            IsDiscontinued = false,
                            Name = "Acer Swift 3",
                            Price = 799.99m,
                            Sku = "LAPTOP-006",
                            StockQuantity = 12L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedWhenUtc = new DateTime(2025, 4, 2, 12, 2, 50, 614, DateTimeKind.Utc).AddTicks(8126),
                            Description = "128GB, Space Black, 48MP main camera, A16 Bionic chip.",
                            IsDiscontinued = false,
                            Name = "iPhone 14 Pro",
                            Price = 999.99m,
                            Sku = "PHONE-001",
                            StockQuantity = 15L
                        },
                        new
                        {
                            Id = 8L,
                            CreatedWhenUtc = new DateTime(2025, 4, 2, 12, 2, 50, 614, DateTimeKind.Utc).AddTicks(8128),
                            Description = "256GB, Phantom Black, 200MP camera, S Pen included.",
                            IsDiscontinued = false,
                            Name = "Samsung Galaxy S23 Ultra",
                            Price = 1199.99m,
                            Sku = "PHONE-002",
                            StockQuantity = 12L
                        },
                        new
                        {
                            Id = 9L,
                            CreatedWhenUtc = new DateTime(2025, 4, 2, 12, 2, 50, 614, DateTimeKind.Utc).AddTicks(8130),
                            Description = "128GB, Obsidian, Tensor G2 chip, AI-powered camera.",
                            IsDiscontinued = false,
                            Name = "Google Pixel 7 Pro",
                            Price = 899.99m,
                            Sku = "PHONE-003",
                            StockQuantity = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CreatedWhenUtc = new DateTime(2025, 4, 2, 12, 2, 50, 614, DateTimeKind.Utc).AddTicks(8132),
                            Description = "256GB, Eternal Green, Snapdragon 8 Gen 2, 120Hz AMOLED.",
                            IsDiscontinued = false,
                            Name = "OnePlus 11 5G",
                            Price = 799.99m,
                            Sku = "PHONE-004",
                            StockQuantity = 11L
                        },
                        new
                        {
                            Id = 11L,
                            CreatedWhenUtc = new DateTime(2025, 4, 2, 12, 2, 50, 614, DateTimeKind.Utc).AddTicks(8134),
                            Description = "256GB, Ceramic Black, 1-inch Sony IMX989 sensor, Leica optics.",
                            IsDiscontinued = false,
                            Name = "Xiaomi 13 Pro",
                            Price = 1099.99m,
                            Sku = "PHONE-005",
                            StockQuantity = 10L
                        },
                        new
                        {
                            Id = 12L,
                            CreatedWhenUtc = new DateTime(2025, 4, 2, 12, 2, 50, 614, DateTimeKind.Utc).AddTicks(8136),
                            Description = "256GB, Frosted Black, 4K OLED display, 12MP triple camera.",
                            IsDiscontinued = false,
                            Name = "Sony Xperia 1 V",
                            Price = 1199.99m,
                            Sku = "PHONE-006",
                            StockQuantity = 6L
                        });
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<long>("OrdersId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductsId")
                        .HasColumnType("bigint");

                    b.HasKey("OrdersId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("Domain.Database.Entities.CardPayment", b =>
                {
                    b.HasBaseType("Domain.Database.Entities.Payment");

                    b.Property<int>("CVV")
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Card");
                });

            modelBuilder.Entity("Domain.Database.Entities.CryptoPayment", b =>
                {
                    b.HasBaseType("Domain.Database.Entities.Payment");

                    b.Property<string>("CryptoType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WalletAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Crypto");
                });

            modelBuilder.Entity("Domain.Database.Entities.PayPalPayment", b =>
                {
                    b.HasBaseType("Domain.Database.Entities.Payment");

                    b.Property<string>("PayPalEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("PayPal");
                });

            modelBuilder.Entity("Domain.Database.Entities.Order", b =>
                {
                    b.HasOne("Domain.Database.Entities.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Database.Entities.Payment", b =>
                {
                    b.HasOne("Domain.Database.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Domain.Database.Entities.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("Domain.Database.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Database.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Database.Entities.Account", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Database.Entities.Order", b =>
                {
                    b.Navigation("Payment");
                });
#pragma warning restore 612, 618
        }
    }
}
